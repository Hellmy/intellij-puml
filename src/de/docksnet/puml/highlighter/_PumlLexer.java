/* The following code was generated by JFlex 1.4.3 on 17.01.13 17:08 */

package de.docksnet.puml.highlighter;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.docksnet.puml.psi.BnfTypes;
import de.docksnet.puml.psi.BnfTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17.01.13 17:08 from the specification file
 * <tt>puml.flex</tt>
 */
public class _PumlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\36\1\0\1\4"+
    "\15\0\12\2\6\0\1\25\32\2\4\0\1\3\1\0\1\5\1\6"+
    "\1\12\1\26\1\20\1\23\1\34\1\35\1\22\1\24\1\31\1\14"+
    "\1\15\1\17\1\13\1\16\1\2\1\11\1\7\1\10\1\21\1\27"+
    "\1\33\1\30\1\32\1\2\57\0\1\2\12\0\1\2\4\0\1\2"+
    "\5\0\27\2\1\0\37\2\1\0\u01ca\2\4\0\14\2\16\0\5\2"+
    "\7\0\1\2\1\0\1\2\201\0\5\2\1\0\2\2\2\0\4\2"+
    "\10\0\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\123\2"+
    "\1\0\213\2\10\0\236\2\11\0\46\2\2\0\1\2\7\0\47\2"+
    "\110\0\33\2\5\0\3\2\55\0\53\2\25\0\12\2\4\0\2\2"+
    "\1\0\143\2\1\0\1\2\17\0\2\2\7\0\2\2\12\2\3\2"+
    "\2\0\1\2\20\0\1\2\1\0\36\2\35\0\131\2\13\0\1\2"+
    "\16\0\12\2\41\2\11\0\2\2\4\0\1\2\5\0\26\2\4\0"+
    "\1\2\11\0\1\2\3\0\1\2\27\0\31\2\253\0\66\2\3\0"+
    "\1\2\22\0\1\2\7\0\12\2\4\0\12\2\1\0\7\2\1\0"+
    "\7\2\5\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\1\2\3\0\4\2\3\0\1\2\20\0\1\2\15\0\2\2\1\0"+
    "\3\2\4\0\12\2\2\2\23\0\6\2\4\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\37\0\4\2"+
    "\1\0\1\2\7\0\12\2\2\0\3\2\20\0\11\2\1\0\3\2"+
    "\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\22\0\1\2\17\0\2\2\4\0\12\2\25\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\36\0\2\2\1\0\3\2\4\0\12\2\1\0\1\2\21\0\1\2"+
    "\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2"+
    "\1\0\2\2\3\0\2\2\3\0\3\2\3\0\14\2\26\0\1\2"+
    "\25\0\12\2\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2"+
    "\1\0\5\2\3\0\1\2\32\0\2\2\6\0\2\2\4\0\12\2"+
    "\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2"+
    "\3\0\1\2\40\0\1\2\1\0\2\2\4\0\12\2\1\0\2\2"+
    "\22\0\10\2\1\0\3\2\1\0\51\2\2\0\1\2\20\0\1\2"+
    "\21\0\2\2\4\0\12\2\12\0\6\2\5\0\22\2\3\0\30\2"+
    "\1\0\11\2\1\0\1\2\2\0\7\2\72\0\60\2\1\0\2\2"+
    "\14\0\7\2\11\0\12\2\47\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2"+
    "\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\2\2\0\2\2"+
    "\42\0\1\2\37\0\12\2\26\0\10\2\1\0\44\2\33\0\5\2"+
    "\163\0\53\2\24\0\1\2\12\2\6\0\6\2\4\0\4\2\3\0"+
    "\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0"+
    "\12\2\6\0\46\2\12\0\53\2\1\0\1\2\3\0\u0149\2\1\0"+
    "\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\51\2\1\0"+
    "\4\2\2\0\41\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0"+
    "\4\2\2\0\17\2\1\0\71\2\1\0\4\2\2\0\103\2\45\0"+
    "\20\2\20\0\125\2\14\0\u026c\2\2\0\21\2\1\0\32\2\5\0"+
    "\113\2\25\0\15\2\1\0\4\2\16\0\22\2\16\0\22\2\16\0"+
    "\15\2\1\0\3\2\17\0\64\2\43\0\1\2\4\0\1\2\3\0"+
    "\12\2\46\0\12\2\6\0\130\2\10\0\51\2\1\0\1\2\5\0"+
    "\106\2\12\0\35\2\51\0\12\2\36\2\2\0\5\2\13\0\54\2"+
    "\25\0\7\2\10\0\12\2\46\0\27\2\11\0\65\2\53\0\12\2"+
    "\6\0\12\2\15\0\1\2\135\0\57\2\21\0\7\2\4\0\12\2"+
    "\51\0\36\2\15\0\2\2\12\2\6\0\46\2\32\0\44\2\34\0"+
    "\12\2\3\0\3\2\12\2\44\2\153\0\4\2\1\0\4\2\16\0"+
    "\300\2\100\0\u0116\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0"+
    "\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0"+
    "\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2\164\0"+
    "\1\2\15\0\1\2\20\0\15\2\145\0\1\2\4\0\1\2\2\0"+
    "\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\4\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0"+
    "\1\2\64\0\2\2\u0a7b\0\57\2\1\0\57\2\1\0\205\2\6\0"+
    "\4\2\21\0\46\2\12\0\66\2\11\0\1\2\20\0\27\2\11\0"+
    "\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0"+
    "\7\2\1\0\7\2\1\0\7\2\120\0\1\2\u01d5\0\2\2\52\0"+
    "\5\2\5\0\2\2\4\0\126\2\6\0\3\2\1\0\132\2\1\0"+
    "\4\2\5\0\51\2\3\0\136\2\21\0\33\2\65\0\20\2\u0200\0"+
    "\u19b6\2\112\0\u51cc\2\64\0\u048d\2\103\0\56\2\2\0\u010d\2\3\0"+
    "\20\2\12\2\2\2\24\0\57\2\20\0\31\2\10\0\106\2\61\0"+
    "\11\2\2\0\147\2\2\0\4\2\1\0\2\2\16\0\12\2\120\0"+
    "\10\2\1\0\3\2\1\0\4\2\1\0\27\2\35\0\64\2\16\0"+
    "\62\2\34\0\12\2\30\0\6\2\3\0\1\2\4\0\12\2\34\2"+
    "\12\0\27\2\31\0\35\2\7\0\57\2\34\0\1\2\12\2\46\0"+
    "\51\2\27\0\3\2\1\0\10\2\4\0\12\2\6\0\27\2\3\0"+
    "\1\2\5\0\60\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0"+
    "\1\2\1\0\1\2\30\0\3\2\43\0\6\2\2\0\6\2\2\0"+
    "\6\2\11\0\7\2\1\0\7\2\221\0\43\2\15\0\12\2\6\0"+
    "\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u012e\2\2\0\76\2\2\0"+
    "\152\2\46\0\7\2\14\0\5\2\5\0\1\2\1\0\12\2\1\0"+
    "\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0"+
    "\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\14\2\164\0"+
    "\5\2\1\0\207\2\23\0\12\2\7\0\32\2\6\0\32\2\13\0"+
    "\131\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\2\16\1\1\2\3\1"+
    "\1\0\1\4\1\1\1\5\23\1\1\6\1\7\13\1"+
    "\1\10\1\1\1\11\1\1\2\0\10\1\1\12\3\1"+
    "\1\13\3\1\1\14\3\1\1\15\7\1\1\16\4\1"+
    "\1\17\7\1\1\20\3\1\2\0\11\1\1\21\4\1"+
    "\1\22\1\23\1\0\12\1\1\24\1\25\1\26\1\27"+
    "\2\1\1\30\1\1\1\31\1\1\1\32\1\33\4\1"+
    "\2\0\1\34\4\1\1\35\1\1\1\36\2\1\1\37"+
    "\1\1\1\40\1\1\1\0\1\41\2\1\1\42\3\1"+
    "\1\43\6\1\1\44\4\1\2\0\2\1\1\45\4\1"+
    "\1\46\1\1\1\0\1\47\1\50\1\51\2\1\1\52"+
    "\1\53\10\1\1\54\2\0\2\1\1\55\4\1\1\0"+
    "\4\1\1\56\1\1\1\57\1\60\1\1\1\61\1\0"+
    "\1\62\1\1\1\63\1\64\1\65\2\1\1\0\1\66"+
    "\5\1\1\0\2\1\1\67\1\0\1\70\1\71\1\1"+
    "\1\72\1\73\1\74\1\1\1\75\1\0\1\1\1\76"+
    "\1\0\1\77\13\0\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2\0\u01d1"+
    "\0\u01f0\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b\0\u02aa\0\174"+
    "\0\37\0\u02c9\0\135\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364"+
    "\0\u0383\0\u03a2\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c"+
    "\0\u047b\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516\0\135\0\135"+
    "\0\u0535\0\u0554\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e"+
    "\0\u062d\0\u064c\0\u066b\0\135\0\u068a\0\135\0\u06a9\0\u06c8"+
    "\0\u06e7\0\u0706\0\u0725\0\u0744\0\u0763\0\u0782\0\u07a1\0\u07c0"+
    "\0\u07df\0\135\0\u07fe\0\u081d\0\u083c\0\135\0\u085b\0\u087a"+
    "\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915\0\135\0\u0934\0\u0953"+
    "\0\u0972\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\135\0\u0a0d\0\u0a2c"+
    "\0\u0a4b\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05\0\u0b24"+
    "\0\u0b43\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\u0c1c"+
    "\0\u0c3b\0\u0c5a\0\u0c79\0\u0c98\0\u0cb7\0\u0cd6\0\u0cf5\0\u0d14"+
    "\0\u0d33\0\135\0\u0d52\0\u0d71\0\u0d90\0\u0daf\0\u0dce\0\135"+
    "\0\u0ded\0\u0e0c\0\u0e2b\0\u0e4a\0\u0e69\0\u0e88\0\u0ea7\0\u0ec6"+
    "\0\u0ee5\0\u0f04\0\u0f23\0\135\0\135\0\135\0\135\0\u0f42"+
    "\0\u0f61\0\135\0\u0f80\0\135\0\u0f9f\0\135\0\135\0\u0fbe"+
    "\0\u0fdd\0\u0ffc\0\u101b\0\u103a\0\u1059\0\135\0\u1078\0\u1097"+
    "\0\u10b6\0\u10d5\0\135\0\u10f4\0\135\0\u1113\0\u1132\0\135"+
    "\0\u1151\0\135\0\u1170\0\u118f\0\135\0\u11ae\0\u11cd\0\135"+
    "\0\u11ec\0\u120b\0\u122a\0\135\0\u1249\0\u1268\0\u1287\0\u12a6"+
    "\0\u12c5\0\u12e4\0\135\0\u1303\0\u1322\0\u1341\0\u1360\0\u137f"+
    "\0\u139e\0\u13bd\0\u13dc\0\135\0\u13fb\0\u141a\0\u1439\0\u1458"+
    "\0\135\0\u1477\0\u1496\0\135\0\135\0\135\0\u14b5\0\u14d4"+
    "\0\135\0\135\0\u14f3\0\u1512\0\u1531\0\u1550\0\u156f\0\u158e"+
    "\0\u15ad\0\u15cc\0\135\0\u15eb\0\u160a\0\u1629\0\u1648\0\135"+
    "\0\u1667\0\u1686\0\u16a5\0\u16c4\0\u16e3\0\u1702\0\u1721\0\u1740"+
    "\0\u175f\0\135\0\u177e\0\135\0\135\0\u179d\0\135\0\u17bc"+
    "\0\37\0\u17db\0\135\0\135\0\135\0\u17fa\0\u1819\0\u1838"+
    "\0\135\0\u1857\0\u1876\0\u1895\0\u18b4\0\u18d3\0\u18f2\0\u1911"+
    "\0\u1930\0\135\0\u194f\0\135\0\135\0\u196e\0\135\0\135"+
    "\0\37\0\u198d\0\135\0\u19ac\0\u19cb\0\135\0\u19ea\0\135"+
    "\0\u1a09\0\u1a28\0\u1a47\0\u1a66\0\u1a85\0\u1aa4\0\u1ac3\0\u1ae2"+
    "\0\u1b01\0\u1b20\0\u1b3f\0\37";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\4\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\4\1\24\1\25\5\4\1\26"+
    "\1\27\1\3\40\0\1\3\34\0\1\3\2\0\2\4"+
    "\1\0\20\4\1\0\10\4\2\0\2\30\1\0\1\31"+
    "\20\30\1\0\11\30\2\0\2\4\1\0\1\4\1\32"+
    "\1\33\2\4\1\34\1\4\1\35\4\4\1\36\3\4"+
    "\1\0\10\4\3\0\2\4\1\0\4\4\1\37\1\4"+
    "\1\40\11\4\1\0\10\4\3\0\2\4\1\0\3\4"+
    "\1\41\14\4\1\0\3\4\1\42\3\4\1\43\3\0"+
    "\2\4\1\0\6\4\1\44\6\4\1\45\2\4\1\0"+
    "\10\4\3\0\2\4\1\0\6\4\1\46\4\4\1\47"+
    "\1\4\1\50\2\4\1\0\10\4\3\0\2\4\1\0"+
    "\4\4\1\51\1\4\1\52\1\53\3\4\1\54\4\4"+
    "\1\0\10\4\3\0\2\4\1\0\1\4\1\55\7\4"+
    "\1\56\1\57\3\4\1\60\1\4\1\0\1\4\1\61"+
    "\6\4\3\0\2\4\1\0\6\4\1\62\4\4\1\63"+
    "\1\4\1\64\2\4\1\0\10\4\3\0\2\4\1\0"+
    "\1\65\17\4\1\0\10\4\3\0\2\4\1\0\1\66"+
    "\5\4\1\67\4\4\1\70\4\4\1\0\10\4\3\0"+
    "\2\4\1\0\7\4\1\71\2\4\1\72\5\4\1\0"+
    "\10\4\3\0\2\4\1\0\2\4\1\73\6\4\1\74"+
    "\6\4\1\0\10\4\3\0\2\4\1\0\12\4\1\75"+
    "\3\4\1\76\1\4\1\0\10\4\3\0\2\4\1\0"+
    "\6\4\1\77\11\4\1\0\10\4\10\0\1\100\10\0"+
    "\1\101\20\0\2\4\1\0\6\4\1\102\4\4\1\103"+
    "\4\4\1\0\10\4\3\0\2\4\1\0\4\4\1\104"+
    "\13\4\1\0\10\4\3\0\2\4\1\0\13\4\1\105"+
    "\1\4\1\106\2\4\1\0\10\4\3\0\2\4\1\0"+
    "\2\4\1\107\15\4\1\0\10\4\3\0\2\4\1\0"+
    "\3\4\1\110\14\4\1\0\10\4\3\0\2\4\1\0"+
    "\2\4\1\111\1\112\14\4\1\0\10\4\3\0\2\4"+
    "\1\0\3\4\1\113\14\4\1\0\10\4\3\0\2\4"+
    "\1\0\13\4\1\114\4\4\1\0\10\4\3\0\2\4"+
    "\1\0\3\4\1\115\14\4\1\0\2\4\1\116\5\4"+
    "\3\0\2\4\1\0\1\117\17\4\1\0\10\4\3\0"+
    "\2\4\1\0\15\4\1\120\2\4\1\0\10\4\3\0"+
    "\2\4\1\0\6\4\1\121\11\4\1\0\10\4\3\0"+
    "\2\4\1\0\11\4\1\122\6\4\1\0\10\4\3\0"+
    "\2\4\1\0\3\4\1\123\14\4\1\0\10\4\3\0"+
    "\2\4\1\0\3\4\1\124\14\4\1\0\10\4\3\0"+
    "\2\4\1\0\3\4\1\125\12\4\1\126\1\4\1\0"+
    "\10\4\3\0\2\4\1\0\20\4\1\0\6\4\1\127"+
    "\1\4\3\0\2\4\1\0\13\4\1\130\1\4\1\131"+
    "\2\4\1\0\10\4\3\0\2\4\1\0\10\4\1\132"+
    "\7\4\1\0\10\4\3\0\2\4\1\0\1\133\17\4"+
    "\1\0\10\4\3\0\2\4\1\0\12\4\1\134\5\4"+
    "\1\0\10\4\3\0\2\4\1\0\17\4\1\135\1\0"+
    "\10\4\3\0\2\4\1\0\3\4\1\136\14\4\1\0"+
    "\10\4\3\0\2\4\1\0\13\4\1\137\4\4\1\0"+
    "\10\4\3\0\2\4\1\0\6\4\1\140\11\4\1\0"+
    "\10\4\3\0\2\4\1\0\16\4\1\141\1\4\1\0"+
    "\10\4\3\0\2\4\1\0\12\4\1\142\5\4\1\0"+
    "\10\4\3\0\2\4\1\0\4\4\1\143\1\144\12\4"+
    "\1\0\6\4\1\145\1\4\3\0\2\4\1\0\10\4"+
    "\1\146\7\4\1\0\10\4\3\0\2\4\1\0\3\4"+
    "\1\147\14\4\1\0\10\4\3\0\2\4\1\0\20\4"+
    "\1\0\5\4\1\150\2\4\3\0\2\4\1\0\2\4"+
    "\1\151\15\4\1\0\10\4\3\0\2\4\1\0\14\4"+
    "\1\152\3\4\1\0\1\153\7\4\3\0\2\4\1\0"+
    "\13\4\1\154\4\4\1\0\10\4\3\0\2\4\1\0"+
    "\3\4\1\155\14\4\1\0\10\4\3\0\2\4\1\0"+
    "\6\4\1\156\11\4\1\0\10\4\11\0\1\157\45\0"+
    "\1\160\21\0\2\4\1\0\20\4\1\0\5\4\1\161"+
    "\2\4\3\0\2\4\1\0\1\162\1\4\1\163\15\4"+
    "\1\0\10\4\3\0\2\4\1\0\6\4\1\164\11\4"+
    "\1\0\10\4\3\0\2\4\1\0\1\165\17\4\1\0"+
    "\10\4\3\0\2\4\1\0\20\4\1\0\1\166\7\4"+
    "\3\0\2\4\1\0\3\4\1\167\14\4\1\0\10\4"+
    "\3\0\2\4\1\0\6\4\1\170\6\4\1\171\2\4"+
    "\1\0\10\4\3\0\2\4\1\0\6\4\1\172\11\4"+
    "\1\0\10\4\3\0\2\4\1\0\6\4\1\173\11\4"+
    "\1\0\10\4\3\0\2\4\1\0\1\174\17\4\1\0"+
    "\10\4\3\0\2\4\1\0\3\4\1\175\14\4\1\0"+
    "\10\4\3\0\2\4\1\0\3\4\1\176\14\4\1\0"+
    "\10\4\3\0\2\4\1\0\12\4\1\177\5\4\1\0"+
    "\10\4\3\0\2\4\1\0\20\4\1\0\5\4\1\200"+
    "\2\4\3\0\2\4\1\0\20\4\1\0\10\4\1\201"+
    "\2\0\2\4\1\0\7\4\1\202\10\4\1\0\10\4"+
    "\3\0\2\4\1\0\1\203\17\4\1\0\10\4\3\0"+
    "\2\4\1\0\14\4\1\204\3\4\1\0\10\4\3\0"+
    "\2\4\1\0\20\4\1\0\7\4\1\205\3\0\2\4"+
    "\1\0\1\206\17\4\1\0\10\4\3\0\2\4\1\0"+
    "\3\4\1\207\14\4\1\0\10\4\3\0\2\4\1\0"+
    "\11\4\1\210\6\4\1\0\10\4\3\0\2\4\1\0"+
    "\2\4\1\211\15\4\1\0\10\4\3\0\2\4\1\0"+
    "\3\4\1\212\14\4\1\0\10\4\3\0\2\4\1\0"+
    "\13\4\1\213\4\4\1\0\10\4\3\0\2\4\1\0"+
    "\4\4\1\214\13\4\1\0\10\4\3\0\2\4\1\0"+
    "\11\4\1\215\6\4\1\0\10\4\3\0\2\4\1\0"+
    "\3\4\1\216\14\4\1\0\10\4\3\0\2\4\1\0"+
    "\20\4\1\0\3\4\1\217\4\4\3\0\2\4\1\0"+
    "\3\4\1\220\14\4\1\0\10\4\3\0\2\4\1\0"+
    "\20\4\1\0\3\4\1\221\4\4\3\0\2\4\1\0"+
    "\13\4\1\222\4\4\1\0\10\4\3\0\2\4\1\0"+
    "\13\4\1\223\4\4\1\0\10\4\3\0\2\4\1\0"+
    "\13\4\1\224\4\4\1\0\10\4\3\0\2\4\1\0"+
    "\11\4\1\225\6\4\1\0\10\4\3\0\2\4\1\0"+
    "\13\4\1\226\4\4\1\0\10\4\3\0\2\4\1\0"+
    "\10\4\1\227\7\4\1\0\10\4\3\0\2\4\1\0"+
    "\15\4\1\230\2\4\1\0\10\4\3\0\2\4\1\0"+
    "\5\4\1\231\12\4\1\0\10\4\3\0\2\4\1\0"+
    "\13\4\1\232\4\4\1\0\10\4\3\0\2\4\1\0"+
    "\3\4\1\233\14\4\1\0\10\4\6\0\1\234\57\0"+
    "\1\235\12\0\2\4\1\0\12\4\1\236\5\4\1\0"+
    "\10\4\3\0\2\4\1\0\5\4\1\237\12\4\1\0"+
    "\10\4\3\0\2\4\1\0\3\4\1\240\14\4\1\0"+
    "\10\4\3\0\2\4\1\0\14\4\1\241\3\4\1\0"+
    "\10\4\3\0\2\4\1\0\20\4\1\0\1\242\7\4"+
    "\3\0\2\4\1\0\13\4\1\243\4\4\1\0\10\4"+
    "\3\0\2\4\1\0\4\4\1\244\13\4\1\0\10\4"+
    "\3\0\2\4\1\0\4\4\1\245\13\4\1\0\10\4"+
    "\3\0\2\4\1\0\20\4\1\0\1\4\1\246\6\4"+
    "\3\0\2\4\1\0\12\4\1\247\5\4\1\0\10\4"+
    "\3\0\2\4\1\0\20\4\1\0\3\4\1\250\4\4"+
    "\3\0\2\4\1\0\6\4\1\251\11\4\1\0\10\4"+
    "\3\0\2\4\1\0\13\4\1\252\4\4\1\0\10\4"+
    "\3\0\2\4\1\0\11\4\1\253\6\4\1\0\10\4"+
    "\11\0\1\254\30\0\2\4\1\0\13\4\1\255\4\4"+
    "\1\0\10\4\3\0\2\4\1\0\3\4\1\256\14\4"+
    "\1\0\10\4\3\0\2\4\1\0\4\4\1\257\13\4"+
    "\1\0\10\4\3\0\2\4\1\0\3\4\1\260\14\4"+
    "\1\0\10\4\3\0\2\4\1\0\3\4\1\261\14\4"+
    "\1\0\10\4\3\0\2\4\1\0\15\4\1\262\2\4"+
    "\1\0\10\4\3\0\2\4\1\0\6\4\1\263\11\4"+
    "\1\0\10\4\3\0\2\4\1\0\2\4\1\264\15\4"+
    "\1\0\10\4\3\0\2\4\1\0\13\4\1\265\4\4"+
    "\1\0\10\4\3\0\2\4\1\0\5\4\1\266\12\4"+
    "\1\0\10\4\3\0\2\4\1\0\15\4\1\267\2\4"+
    "\1\0\10\4\3\0\2\4\1\0\1\270\17\4\1\0"+
    "\10\4\3\0\2\4\1\0\2\4\1\271\15\4\1\0"+
    "\10\4\3\0\2\4\1\0\1\272\17\4\1\0\10\4"+
    "\3\0\2\4\1\0\16\4\1\273\1\4\1\0\10\4"+
    "\3\0\2\4\1\0\1\274\17\4\1\0\10\4\3\0"+
    "\2\4\1\0\4\4\1\275\13\4\1\0\10\4\3\0"+
    "\2\4\1\0\1\4\1\276\11\4\1\277\4\4\1\0"+
    "\10\4\12\0\1\300\46\0\1\301\17\0\2\4\1\0"+
    "\3\4\1\302\14\4\1\0\10\4\3\0\2\4\1\0"+
    "\4\4\1\303\13\4\1\0\10\4\3\0\2\4\1\0"+
    "\11\4\1\304\6\4\1\0\10\4\3\0\2\4\1\0"+
    "\13\4\1\305\4\4\1\0\10\4\3\0\2\4\1\0"+
    "\1\306\17\4\1\0\10\4\3\0\2\4\1\0\1\307"+
    "\17\4\1\0\10\4\3\0\2\4\1\0\14\4\1\310"+
    "\3\4\1\0\10\4\3\0\2\4\1\0\10\4\1\311"+
    "\7\4\1\0\10\4\3\0\2\4\1\0\1\312\17\4"+
    "\1\0\10\4\14\0\1\313\25\0\2\4\1\0\13\4"+
    "\1\314\4\4\1\0\10\4\3\0\2\4\1\0\12\4"+
    "\1\315\5\4\1\0\10\4\3\0\2\4\1\0\13\4"+
    "\1\316\4\4\1\0\10\4\3\0\2\4\1\0\5\4"+
    "\1\317\12\4\1\0\10\4\3\0\2\4\1\0\12\4"+
    "\1\320\5\4\1\0\10\4\3\0\2\4\1\0\4\4"+
    "\1\321\13\4\1\0\10\4\3\0\2\4\1\0\3\4"+
    "\1\322\14\4\1\0\10\4\3\0\2\4\1\0\3\4"+
    "\1\323\1\4\1\324\12\4\1\0\10\4\3\0\2\4"+
    "\1\0\20\4\1\0\6\4\1\325\1\4\3\0\2\4"+
    "\1\0\11\4\1\326\6\4\1\0\10\4\3\0\2\4"+
    "\1\0\20\4\1\0\6\4\1\327\1\4\3\0\2\4"+
    "\1\0\2\4\1\330\15\4\1\0\10\4\3\0\2\4"+
    "\1\0\16\4\1\331\1\4\1\0\10\4\3\0\2\4"+
    "\1\0\6\4\1\332\11\4\1\0\10\4\3\0\2\4"+
    "\1\0\4\4\1\333\13\4\1\0\10\4\11\0\1\334"+
    "\43\0\1\335\23\0\2\4\1\0\15\4\1\336\2\4"+
    "\1\0\10\4\3\0\2\4\1\0\6\4\1\337\11\4"+
    "\1\0\10\4\3\0\2\4\1\0\4\4\1\340\13\4"+
    "\1\0\10\4\3\0\2\4\1\0\5\4\1\341\12\4"+
    "\1\0\10\4\3\0\2\4\1\0\3\4\1\342\14\4"+
    "\1\0\10\4\3\0\2\4\1\0\10\4\1\343\7\4"+
    "\1\0\10\4\3\0\2\4\1\0\4\4\1\344\13\4"+
    "\1\0\10\4\37\0\1\345\2\0\2\4\1\0\1\346"+
    "\17\4\1\0\10\4\3\0\2\4\1\0\13\4\1\347"+
    "\4\4\1\0\10\4\3\0\2\4\1\0\15\4\1\350"+
    "\2\4\1\0\10\4\3\0\2\4\1\0\15\4\1\351"+
    "\2\4\1\0\10\4\3\0\2\4\1\0\13\4\1\352"+
    "\4\4\1\0\10\4\3\0\2\4\1\0\1\353\17\4"+
    "\1\0\10\4\3\0\2\4\1\0\13\4\1\354\4\4"+
    "\1\0\10\4\3\0\2\4\1\0\13\4\1\355\4\4"+
    "\1\0\10\4\3\0\2\4\1\0\1\356\17\4\1\0"+
    "\10\4\3\0\2\4\1\0\20\4\1\0\2\4\1\357"+
    "\5\4\22\0\1\360\31\0\1\361\24\0\2\4\1\0"+
    "\20\4\1\0\1\4\1\362\6\4\3\0\2\4\1\0"+
    "\20\4\1\0\4\4\1\363\3\4\3\0\2\4\1\0"+
    "\3\4\1\364\14\4\1\0\10\4\3\0\2\4\1\0"+
    "\13\4\1\365\4\4\1\0\10\4\3\0\2\4\1\0"+
    "\1\4\1\366\16\4\1\0\10\4\3\0\2\4\1\0"+
    "\1\367\17\4\1\0\10\4\7\0\1\370\32\0\2\4"+
    "\1\0\7\4\1\371\10\4\1\0\10\4\3\0\2\4"+
    "\1\0\12\4\1\372\5\4\1\0\10\4\3\0\2\4"+
    "\1\0\6\4\1\373\11\4\1\0\10\4\3\0\2\4"+
    "\1\0\11\4\1\374\6\4\1\0\10\4\3\0\2\4"+
    "\1\0\5\4\1\375\12\4\1\0\10\4\3\0\2\4"+
    "\1\0\5\4\1\376\12\4\1\0\10\4\16\0\1\377"+
    "\23\0\2\4\1\0\1\u0100\17\4\1\0\10\4\3\0"+
    "\2\4\1\0\13\4\1\u0101\4\4\1\0\10\4\3\0"+
    "\2\4\1\0\10\4\1\u0102\7\4\1\0\10\4\14\0"+
    "\1\u0103\25\0\2\4\1\0\3\4\1\u0104\14\4\1\0"+
    "\10\4\3\0\2\4\1\0\12\4\1\u0105\5\4\1\0"+
    "\10\4\3\0\2\4\1\0\1\u0106\17\4\1\0\10\4"+
    "\3\0\2\4\1\0\13\4\1\u0107\4\4\1\0\10\4"+
    "\3\0\2\4\1\0\13\4\1\u0108\4\4\1\0\10\4"+
    "\15\0\1\u0109\24\0\2\4\1\0\3\4\1\u010a\14\4"+
    "\1\0\10\4\3\0\2\4\1\0\4\4\1\u010b\13\4"+
    "\1\0\10\4\11\0\1\u010c\30\0\2\4\1\0\12\4"+
    "\1\u010d\5\4\1\0\10\4\3\0\2\4\1\0\13\4"+
    "\1\u010e\4\4\1\0\10\4\11\0\1\u010f\30\0\2\4"+
    "\1\0\3\4\1\u0110\14\4\1\0\10\4\14\0\1\u0111"+
    "\40\0\1\u0112\57\0\1\u0113\26\0\1\u0114\32\0\1\u0115"+
    "\25\0\1\u0116\45\0\1\u0117\30\0\1\u0118\34\0\1\u0119"+
    "\50\0\1\u011a\27\0\1\u011b\42\0\1\u011c\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7006];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\25\1\1\0\1\11\46\1\2\0\55\1"+
    "\2\0\20\1\1\0\32\1\2\0\16\1\1\0\23\1"+
    "\2\0\11\1\1\0\20\1\2\0\7\1\1\0\12\1"+
    "\1\0\1\11\6\1\1\0\6\1\1\0\3\1\1\0"+
    "\5\1\1\11\2\1\1\0\2\1\1\0\1\1\13\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private int yyline;
    private int yycolumn;

    public IElementType newSym(String debug) {
        return new BnfTokenType(yyline, yycolumn, debug);
    }


  public _PumlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _PumlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1640) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL.charAt(zzCurrentPosL)) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_AS;
          }
        case 65: break;
        case 6: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_ON;
          }
        case 66: break;
        case 43: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_OBJECT;
          }
        case 67: break;
        case 38: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_BOTTOM;
          }
        case 68: break;
        case 37: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_GROUP;
          }
        case 69: break;
        case 60: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_AT__STARTUML;
          }
        case 70: break;
        case 59: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_INTERFACE;
          }
        case 71: break;
        case 45: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_HEADER;
          }
        case 72: break;
        case 42: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_CENTER;
          }
        case 73: break;
        case 15: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_PAR;
          }
        case 74: break;
        case 25: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_NOTE;
          }
        case 75: break;
        case 34: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_RIGHT;
          }
        case 76: break;
        case 62: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_DEACTIVATE;
          }
        case 77: break;
        case 50: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_AT__ENDUML;
          }
        case 78: break;
        case 29: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_HIDE;
          }
        case 79: break;
        case 35: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_CLASS;
          }
        case 80: break;
        case 48: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_USECASE;
          }
        case 81: break;
        case 30: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_ACTOR;
          }
        case 82: break;
        case 49: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_FOOTBOX;
          }
        case 83: break;
        case 20: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_OVER;
          }
        case 84: break;
        case 36: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_ENDIF;
          }
        case 85: break;
        case 22: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_LEFT;
          }
        case 86: break;
        case 51: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_DESTROY;
          }
        case 87: break;
        case 17: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_ALSO;
          }
        case 88: break;
        case 14: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_OPT;
          }
        case 89: break;
        case 24: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_PAGE;
          }
        case 90: break;
        case 31: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_BREAK;
          }
        case 91: break;
        case 64: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_TOP_TO_BOTTOM_DIRECTION;
          }
        case 92: break;
        case 39: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_ROTATE;
          }
        case 93: break;
        case 9: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_IF;
          }
        case 94: break;
        case 57: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_PARTITION;
          }
        case 95: break;
        case 13: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_REF;
          }
        case 96: break;
        case 27: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_ENUM;
          }
        case 97: break;
        case 18: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_SKIN;
          }
        case 98: break;
        case 26: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_ELSE;
          }
        case 99: break;
        case 56: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_COMPONENT;
          }
        case 100: break;
        case 28: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_DOWN;
          }
        case 101: break;
        case 19: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_SHOW;
          }
        case 102: break;
        case 3: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 103: break;
        case 52: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_ABSTRACT;
          }
        case 104: break;
        case 16: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_END;
          }
        case 105: break;
        case 21: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_LOOP;
          }
        case 106: break;
        case 7: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_OF;
          }
        case 107: break;
        case 32: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_STATE;
          }
        case 108: break;
        case 40: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_RETURN;
          }
        case 109: break;
        case 2: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 110: break;
        case 8: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_UP;
          }
        case 111: break;
        case 47: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_NEWPAGE;
          }
        case 112: break;
        case 1: 
          { yybegin(YYINITIAL); return newSym("id");
          }
        case 113: break;
        case 61: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_AUTONUMBER;
          }
        case 114: break;
        case 11: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_BOX;
          }
        case 115: break;
        case 12: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_TOP;
          }
        case 116: break;
        case 63: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_PARTICIPANT;
          }
        case 117: break;
        case 4: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_STRING;
          }
        case 118: break;
        case 54: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_CRITICAL;
          }
        case 119: break;
        case 58: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_NAMESPACE;
          }
        case 120: break;
        case 53: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_ACTIVATE;
          }
        case 121: break;
        case 46: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_PACKAGE;
          }
        case 122: break;
        case 33: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_TITLE;
          }
        case 123: break;
        case 23: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_LINK;
          }
        case 124: break;
        case 41: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_CREATE;
          }
        case 125: break;
        case 44: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_FOOTER;
          }
        case 126: break;
        case 55: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_SKINPARAM;
          }
        case 127: break;
        case 10: 
          { yybegin(YYINITIAL); return BnfTypes.BNF_ALT;
          }
        case 128: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
